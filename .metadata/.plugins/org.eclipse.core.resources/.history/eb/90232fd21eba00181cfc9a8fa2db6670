/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include "scchart.h"
#include "timeouts.h"

//------Defines--------


//------BUTTONS--------
int buttons = 0;
void init_buttons_pio(void);
void button_isr(void* context, alt_u32 id);


//------LEDS-----------
unsigned int ledOn[4] = {0, 0, 0, 0};
unsigned int ledCounts[4] = {0, 0, 0, 0};



/* DESCRIPTION: Initialize the interrupts for all buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void)
{
	// Create the buttons context
	void* context_going_to_be_passed = (void*) &buttons;

	// Clear and mask
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);

	// Start the buttons for interrupts
	alt_irq_register(KEYS_IRQ, context_going_to_be_passed, button_isr);
}



/* DESCRIPTION: Handles the Atrial and ventricle button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void button_isr(void* context, alt_u32 id)
{
	// NOTE:
	// Cast context to volatile to avoid unwanted compiler optimization.
	// Store the value in the Button's edge capture register in *context
	volatile int* value = (volatile int*)context;

	// Read buttons values then clear
	(*value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
	printf("button: %i\n", *value);

	if (*value & 0b1) {
		// Then the right button is pushed (Ventricle)
		VSense = 1;
		ledOn[3] = 1;
		ledCounts[3] = 0;
	}
	if (*value & 0b10) {
		// Then the 2nd right button is pushed (Atrium)
		ASense = 1;
		ledOn[2] = 1;
		ledCounts[2] = 0;
	}
}



/* DESCRIPTION: Handles how long each LED should be on for
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_leds(void) {

	// If the pacemaker is pasing, we should turn on leds
	if(VPase == 1) {
		ledOn[1] = 1;
	}
	if(APase == 1) {
		ledOn[0] = 1;
	}


	// If our rightmost LED is on, we count to 1000 then turn it off
	if(ledOn[3] == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 1);
		if(ledCounts[3] == 1000) {
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~1);
			ledCounts[3] = 0;
			ledOn[3] = 0;
		} else {
			ledCounts[3]++;
		}
	}

	// If our 2nd from right LED is on, we count to 1000 then turn it off
	if(ledOn[2] == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 2);
		if(ledCounts[2] == 1000) {
			ledCounts[2] = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~2);
			ledOn[2] = 0;
		} else {
			ledCounts[2]++;
		}
	}

	// If our third from right LED is on, we count to 1000 then turn it off
	if(ledOn[1] == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 4);
		if(ledCounts[1] == 1000) {
			ledCounts[1] = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~4);
			ledOn[1] = 0;
		} else {
			ledCounts[1]++;
		}
	}

	// If our fourth form right LED is on count to 1000 then turn it off
	if(ledOn[0] == 1) {
		if(ledCounts[0] == 1000) {
			ledCounts[0] = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~4);
			ledOn[0] = 0;
		} else {
			ledCounts[0]++;
		}
	}
}


/* DESCRIPTION: Handles how long each LED should be on for
 * PARAMETER:   none
 * RETURNS:     none
 */
{
	alt_alarm_start(&URITIMER, URI_VALUE, URI_ISR, &URITO);
}

isr {
	URITO = 1;
	return 0;
}

int main(void) {
	// Initialise program
	reset();
	init_buttons_pio();

	while(1) {
		// Turn on or off LEDS as needed
		handle_leds();
		// Go through one cycle of the sccharts program
		tick();
	}
	return 0;
}
